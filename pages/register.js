import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css' 
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import { newUser, getSession, getProviders, signIn } from "next-auth/react";
import axios from 'axios';
export default function Register({ providers, loginError }) { 
    const router = useRouter();

  const [errorMessage, setErrorMessage] = useState(null);
  const [name, setName] = useState(null);
  const [email, setEmail] = useState(null);
  const [password, setPassword] = useState(null); 
    
    useEffect( () =>{
        if(loginError) {
            console.log("loginError", loginError);
            if(loginError == 'CredentialsSignin'){
                setErrorMessage("Incorrect email or password")
            }
            else {
                setErrorMessage("something went wrong. Please try again")
            }
        };
        const setUp = async () => {
             const session = await getSession()        
        if (session) {
          router.push('/profile')
        }   
        }
       setUp();
    }, [])

 

  
  const handleUserRegister = async (e) => {  
    console.log("Register called");  
    e.preventDefault();
    
    if(email == null || email.length == 0 || name == null || name.length == 0 || password == null || password.length == 0) {
        setErrorMessage("Please fill all required fields");
        return;
    }
    try {
        const data = {
            name: name,
            email: email,
            password: password 
        }
        const REGISTER_END_POINT = process.env.NEXT_PUBLIC_API_ROOT + 'register'
 
        
            const res = await fetch(REGISTER_END_POINT, {
            method: 'POST',
            body: JSON.stringify(data),
            headers: {
              'Content-Type': 'application/json', 
              'Accept-Language': 'en-US',
            },
          });
  
          const user = await res.json() 
        console.log("Register: ", user);

          if (res.ok && user) {
            signIn("credentials", {
                email, password, callbackUrl: `${window.location.origin}/profile`, redirect: false }
            ).then(function(result) {
                router.push(result.url)
            }).catch(err => {
                setErrorMessage("Failed to register: " + err.toString())
            });
          }
          else {
            setErrorMessage("something went wrong. Please try again")

          }
        
  
        } catch (error) {
        console.log("Register error: ", error);

            setErrorMessage("something went wrong. Please try again")

        }

 
  }
    
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
      {errorMessage &&
        <div style={{color: 'red'}}>
            
            {errorMessage}
           <button onClick={() => {setErrorMessage(null)}}>Close</button>
        </div>
        }
        <h1 className={styles.title}>
          Register Page
        </h1>

      
        <form onSubmit={handleUserRegister}>
        <div style={{marginBottom: 10, marginTop: 10}}>
                <label htmlFor="name">Name</label>
                <input value={name} onChange={(e) => setName(e.target.value)}
                type="text" id="name" name="name" required />
            </div>
            <div style={{marginBottom: 10, marginTop: 10}}>
                <label htmlFor="email">Email</label>
                <input value={email} onChange={(e) => setEmail(e.target.value)}
                type="email" id="email" name="email" required />
            </div>
            <div style={{marginBottom: 10}}>
            
                 <label htmlFor="password">Password</label>
                 <input type="password"  value={password} onChange={(e) => setPassword(e.target.value)} id="password" name="password" required />

            </div>
      <button type="submit">Register</button>
    </form>

      </main>

       
    </div>
  )
}
 

export async function getServerSideProps(context) {
    const { query, req, res } = context;
    var error = ''
    if(Boolean(query.error)) {
      error = query.error
    }
    
    try {    
      const secret = process.env.NEXTAUTH_SECRET
      const token = await getToken({ req, secret })   
      
      return { props: { providers: await getProviders(), loginError: error } };
    } catch (e) {
      return { props: { providers: await getProviders(), loginError: error } };
    }
    
  }